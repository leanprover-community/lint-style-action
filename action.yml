name: "Mathlib style linter"
description: |
  Text-based linters to ensure Lean code meets Mathlib style guidelines.
  This action will automatically make suggestions to PRs to fix style issues.
  Write "bot fix style" in a comment to have a bot apply all style suggestions.

  This action is intended to run in multiple workflows, with different `mode` settings.
  * on pushes to branches, run this action in mode `check` to run the linters.
  * on `pull_request`, run this action in mode `suggest` to run the linters and comment with suggestions.
  * on `issue_comment`, `pull_request_review` or `pull_request_review_comment` (with types `[created, edited`),
    run this action in mode `fix` to listen for "bot fix style" comments and apply the suggestions.

inputs:
  mode:
    description: |
      The actions taken based on style linter output.
      When set to `check`, this action runs the style linters.
      When set to `suggest`, this action adds review comments with suggestions.
      When set to `fix`, this action looks for a "bot fix style" comment and pushes a commit with the suggested fixes.
      Allowed values: "check", "suggest" or "fix".
    required: true
  lint-bib-file:
    description: |
      Enables linting of the bibiliography using `./scripts/lint-bib.sh`.
    required: false
    default: "false"
  BOT_FIX_STYLE_TOKEN:
    description: |
      Secret token used by the style bot to interact with GitHub. Only required for the `fix` mode.
    required: false
  ref:
    description: |
      The branch, tag or SHA to lint. This defaults to the reference or SHA for the event that triggered the workflow.
  default: ''
  required: false

outputs:
  user_permission:
    description: |
      (In `fix` mode:) Did the user ask for "bot fix style" and have enough permission?
      Allowed values: "true" | "false"
    value: ${{ steps.user_permission.outputs.require-result }}

runs:
  using: "composite"
  steps:
    - name: Find bot fix style
      if: ${{ inputs.mode == 'fix' }}
      id: bot_fix_style
      shell: bash
      run: |
        COMMENT="${COMMENT_EVENT}${COMMENT_REVIEW}${COMMENT_REVIEW_COMMENT}"
        # we strip `\r` since line endings from GitHub contain this character
        COMMENT="${COMMENT//$'\r'/}"
        # for debugging, we print some information
        printf '%s' "${COMMENT}" | hexdump -cC
        printf 'Comment:"%s"\n' "${COMMENT}"
        bot_fix_style="$(printf '%s' "${COMMENT}" |
          sed -n 's=^bot fix style$=bot-fix-style=p' | head -1)"

        printf $'"bot fix style"? \'%s\'\n' "${bot_fix_style}"
        printf $'AUTHOR: \'%s\'\n' "${AUTHOR}"
        printf $'PR_NUMBER: \'%s\'\n' "${{ github.event.issue.number }}${{ github.event.pull_request.number }}"
        printf $'%s' "${{ github.event.issue.number }}${{ github.event.pull_request.number }}" | hexdump -cC

        printf $'bot_fix_style=%s\n' "${bot_fix_style}" >> "${GITHUB_OUTPUT}"
        # these final variables are probably not relevant for the bot_fix_style action
        if [ "${AUTHOR}" == 'leanprover-community-mathlib4-bot' ] ||
           [ "${AUTHOR}" == 'leanprover-community-bot-assistant' ]
        then
          printf $'bot=true\n'
          printf $'bot=true\n' >> "${GITHUB_OUTPUT}"
        else
          printf $'bot=false\n'
          printf $'bot=false\n' >> "${GITHUB_OUTPUT}"
        fi

    - id: user_permission
      if: ${{ inputs.mode == 'fix' && steps.bot_fix_style.outputs.bot_fix_style == 'bot-fix-style' }}
      uses: actions-cool/check-user-permission@7b90a27f92f3961b368376107661682c441f6103 # v2.3.0
      with:
        require: 'write'

    # from now on, it is sufficient to just check `user_permission`:
    # if the comment did not contain `bot fix style`,
    # then `user_permission` would not have ran
    - name: Add reaction (comment)
      # reactions are only supported for `comment`s and `review_comment`s?
      # This action only runs on `comment`s rather than `review`s or `review_comment`s
      # Is the `id` check a good way to check that this is a `comment`?
      if: ${{ inputs.mode == 'fix' && steps.user_permission.outputs.require-result == 'true' &&
              ! github.event.comment.id == '' }}
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      with:
        comment-id: ${{ github.event.comment.id }}
        reactions: rocket

    - name: Add reaction (review comment)
      # this action only runs on `review_comment`s
      # is the `id` check a good way to check that this is a `review_comment`?
      if: ${{ inputs.mode == 'fix' && steps.user_permission.outputs.require-result == 'true' &&
              ! github.event.pull_request_review_comment.id == '' }}
      shell: bash
      run: |
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls/comments/${{ github.event.comment.id }}/reactions \
            -f "content=rocket"
      env:
          GH_TOKEN: ${{ inputs.BOT_FIX_STYLE_TOKEN }}

    - name: cleanup
      if: ${{ inputs.mode == 'check' || inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true' }}
      shell: bash
      run: |
        find . -name . -o -prune -exec rm -rf -- {} +

    # In `fix` mode, we can't directly checkout the code, see the "Checkout PR branch (fix)" step for that case.
    - name: Checkout PR branch (check/suggest)
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        ref: ${{ inputs.ref }}
      if: ${{ inputs.mode == 'check' || inputs.mode == 'suggest' }}

    - name: Checkout PR branch (fix)
      if: ${{ steps.user_permission.outputs.require-result == 'true' }}
      shell: bash
      run: |
          # covers `comment`s
          gh pr checkout ${{ github.event.issue.number }} ||
          # covers `review`s and `review_comment`s
          gh pr checkout ${{ github.event.pull_request.number }}
      env:
          GH_TOKEN: ${{ inputs.BOT_FIX_STYLE_TOKEN }}


    # Run the case checker action
    - name: Check Case Sensitivity
      if: ${{ inputs.mode == 'check' }}
      uses: credfeto/action-case-checker@cb652aeab29ed363bbdb7d9ee1bfcc010c46cac5 # v1.3.0

    - name: Look for ignored files
      if: ${{ inputs.mode == 'check' }}
      uses: credfeto/action-no-ignored-files@4fccae50720d89bef0cd9dc99a85a19b765d2e70 # v1.2.0

    - name: "Check for Lean files with the executable bit set"
      if: ${{ inputs.mode == 'check' }}
      shell: bash
      run: |
        executable_files="$(find . -name '*.lean' -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \))"
        if [[ -n "$executable_files" ]]
        then
          echo "ERROR: The following Lean files have the executable bit set."
          echo "$executable_files"
          exit 1
        fi


    - name: install Python
      if: ${{ inputs.mode == 'check' || inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true' }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.8

    - name: Configure Lean
      if: ${{ inputs.mode == 'check' || inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true' }}
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # 2025-04-24
      with:
        auto-config: false
        use-github-cache: false
        use-mathlib-cache: false

    - name: lint
      if: ${{ inputs.mode == 'check' }}
      shell: bash
      run: |
        lake exe lint-style

    - name: lint
      if: ${{ inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true' }}
      shell: bash
      run: |
        lake exe lint-style --fix

    - name: suggester / lint-style
      if: ${{ inputs.mode == 'suggest' }}
      uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
      with:
        tool_name: lint-style (comment with "bot fix style" to have the bot commit all style suggestions)

    - name: Install bibtool
      if: ${{ inputs.lint-bib-file == 'true' && (inputs.mode == 'check' || inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true') }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y bibtool

    - name: lint references.bib
      if: ${{ inputs.lint-bib-file == 'true' && (inputs.mode == 'check' || inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true') }}
      shell: bash
      run: |
        # ignoring the return code allows the following `reviewdog` step to add GitHub suggestions
        ./scripts/lint-bib.sh || true

    - name: suggester / lint-bib
      if: ${{ inputs.lint-bib-file == 'true' && inputs.mode == 'suggest' }}
      uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
      with:
        tool_name: lint-bib (comment with "bot fix style" to have the bot commit all style suggestions)

    - name: update {Mathlib, Tactic, Counterexamples, Archive}.lean
      if: ${{ inputs.mode == 'suggest' || steps.user_permission.outputs.require-result == 'true' }}
      shell: bash
      run: |
        # ignoring the return code allows the following `reviewdog` step to add GitHub suggestions
        lake exe mk_all || true

    - name: suggester / import list
      if: ${{ inputs.mode == 'suggest' }}
      uses: reviewdog/action-suggester@4747dbc9f9e37adba0943e681cc20db466642158 # v1.21.0
      with:
        tool_name: imports (comment with "bot fix style" to have the bot commit all style suggestions)

    - name: Commit and push changes
      if: steps.user_permission.outputs.require-result == 'true'
      shell: bash
      run: |
        # cleanup junk from build
        rm docs/references.bib.old
        # setup commit and push
        git config user.name "leanprover-community-mathlib4-bot"
        git config user.email "leanprover-community-mathlib4-bot@users.noreply.github.com"
        git add .
        # Don't fail if there's nothing to commit
        git commit -m "commit changes from style linters" || true
        git push origin HEAD
